# Default values for tg-bot-serverless.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global settings for the chart
global:
  namespace: telegram-serverless
  redis:
    host: "redis-service"
    port: 6379
  kafka:
    brokers: "kafka-service:9092"

manager:
  # This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
  replicaCount: 1
  image:
    repository: manager
    # This sets the pull policy for images.
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: latest
  service:
    # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    type: ClusterIP
    # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
    port: 8080
  metrics:
    port: 9090
  config:
    port: "8080"
    redis_db: "0"
    gateway_url: "http://{{ .Values.ingress.host }}" # Используем http для локального запуска
    worker_namespace: "telegram-serverless"
    log_level: "info"
    sidecar_image: "tg_proxy:latest"
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi
  serviceAccount:
    create: true
    name: "manager-sa"

tgGateway:
  # This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
  replicaCount: 2
  image:
    repository: tg_gateway
    # This sets the pull policy for images.
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: latest
  service:
    # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    type: ClusterIP
    # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
    port: 80
    targetPort: 8080
  metrics:
    port: 9090
  config:
    port: "8080"
    redis_db: "0"
    telegram_api_url: "https://api.telegram.org"
    log_level: "info"
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi

redis:
  # This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
  replicaCount: 1
  image:
    repository: redis
    # This sets the pull policy for images.
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: 7-alpine
  service:
    # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    type: ClusterIP
    # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
    port: 6379
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi

# Конфигурация для Kafka в режиме KRaft
kafka:
  replicas: 1 # Для локального теста достаточно одной реплики
  storage: "1Gi"
  # !! ВАЖНО: Сгенерируйте уникальный ID для вашего кластера
  # Можно использовать команду: openssl rand -base64 16
  clusterId: "ksRcvwjSyC12Ph27cm4mOQ=="

ingress:
  enabled: true
  host: "tg-gateway.local"
  tls:
    enabled: false # Отключаем TLS
    secretName: ""
    caSecretName: ""
