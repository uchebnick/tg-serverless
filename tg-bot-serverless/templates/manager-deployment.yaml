apiVersion: apps/v1
kind: Deployment
metadata:
  name: manager
  namespace: {{ .Values.global.namespace }}
  labels:
    app: manager
spec:
  replicas: {{ .Values.manager.replicaCount }}
  selector:
    matchLabels:
      app: manager
  template:
    metadata:
      labels:
        app: manager
    spec:
      serviceAccountName: {{ .Values.manager.serviceAccount.name }}
      containers:
      - name: manager
        image: "{{ .Values.manager.image.repository }}:{{ .Values.manager.image.tag }}"
        imagePullPolicy: {{ .Values.manager.image.pullPolicy }}
        ports:
        - name: http
          containerPort: {{ .Values.manager.service.port }}
        - name: metrics
          containerPort: {{ .Values.manager.metrics.port }}
        envFrom:
        - configMapRef:
            name: manager-config
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: password
              optional: true
        - name: TLS_CA_SECRET_NAME
          value: {{ .Values.ingress.tls.caSecretName | quote }}
        resources:
          requests:
            cpu: {{ .Values.manager.resources.requests.cpu }}
            memory: {{ .Values.manager.resources.requests.memory }}
          limits:
            cpu: {{ .Values.manager.resources.limits.cpu }}
            memory: {{ .Values.manager.resources.limits.memory }}
        livenessProbe:
          httpGet:
            path: /health
            port: {{ .Values.manager.service.port }}
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /ready
            port: {{ .Values.manager.service.port }}
          initialDelaySeconds: 5
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: manager
  namespace: {{ .Values.global.namespace }}
  labels:
    app: manager
spec:
  type: {{ .Values.manager.service.type }}
  ports:
  - name: http
    port: {{ .Values.manager.service.port }}
    targetPort: {{ .Values.manager.service.port }}
    protocol: TCP
  - name: metrics
    port: {{ .Values.manager.metrics.port }}
    targetPort: {{ .Values.manager.metrics.port }}
    protocol: TCP
  selector:
    app: manager
---
{{- if .Values.manager.serviceAccount.create }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.manager.serviceAccount.name }}
  namespace: {{ .Values.global.namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: manager-role
  namespace: {{ .Values.global.namespace }}
rules:
- apiGroups: [""]
  resources: ["namespaces", "pods", "services", "secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["keda.sh"]
  resources: ["scaledobjects"]
  verbs: ["get", "list", "watch", "create", "update", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: manager-rolebinding
  namespace: {{ .Values.global.namespace }}
subjects:
- kind: ServiceAccount
  name: {{ .Values.manager.serviceAccount.name }}
  namespace: {{ .Values.global.namespace }}
roleRef:
  kind: Role
  name: manager-role
  apiGroup: rbac.authorization.k8s.io
{{- end }}
